@model AdminGUI.Models.AnalysisModel

@{
    ViewData["Title"] = "Analysis";
}

<h1>Analysis</h1>

<div>
    <dl class="row">
        <dt class = "col-sm-4 center">
            @Html.DisplayNameFor(model => model.AvgSentimentScore)
        </dt>
        <dd class = "col-sm-8">
            @Html.DisplayFor(model => model.AvgSentimentScore)
        </dd>
        <dt class = "col-sm-4">
            @Html.DisplayNameFor(model => model.NumPositiveSentiments)
        </dt>
        <dd class = "col-sm-8">
            @Html.DisplayFor(model => model.NumPositiveSentiments)
        </dd>
        <dt class = "col-sm-4">
            @Html.DisplayNameFor(model => model.PercentPositiveSentiments)
        </dt>
        <dd class = "col-sm-8">
            @Html.DisplayFor(model => model.PercentPositiveSentiments)
        </dd>
        <dt class = "col-sm-4">
            @Html.DisplayNameFor(model => model.NumNegativeSentiments)
        </dt>
        <dd class = "col-sm-8">
            @Html.DisplayFor(model => model.NumNegativeSentiments)
        </dd>
        <dt class = "col-sm-4">
            @Html.DisplayNameFor(model => model.PercentNegativeSentiments)
        </dt>
        <dd class = "col-sm-8">
            @Html.DisplayFor(model => model.PercentNegativeSentiments)
        </dd>
        <dt class = "col-sm-4">
            @Html.DisplayNameFor(model => model.NumNeutralSentiments)
        </dt>
        <dd class = "col-sm-8">
            @Html.DisplayFor(model => model.NumNeutralSentiments)
        </dd>
        <dt class = "col-sm-4">
            @Html.DisplayNameFor(model => model.PercentNeutralSentiments)
        </dt>
        <dd class = "col-sm-8">
            @Html.DisplayFor(model => model.PercentNeutralSentiments)
        </dd>
    </dl>
</div>

<div class="text-center">
    <div class="card">
        <div class="card-header">Percentage of Sentiment Scores</div>
        <div class="chart-container">
            <canvas id="pie-chart" width="100" height="300"></canvas>
        </div>
        <!--
        <div class="card-header">Vertical Bar Chart</div>
        <div class="chart-container">
            <canvas id="bar-chart" width="100" height="300"></canvas>
        </div>
        <div class="card-header">Horizontal bar chart</div>
        <div class="chart-container">
            <canvas id="horizontal-bar-chart" width="100" height="300"></canvas>
        </div>
        <div class="card-header">Doughnut chart</div>
        <div class="chart-container">
            <canvas id="doughnut-chart" width="100" height="300"></canvas>
        </div>
        <div class="card-header">Polar area chart</div>
        <div class="chart-container">
            <canvas id="polar-area-chart" width="100" height="300"></canvas>
        </div>
        -->
       
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>

<script>
    var Data = [];
    var Labels = []

    Data.push(@Model.NumPositiveSentiments);
    Data.push(@Model.NumNegativeSentiments);
    Data.push(@Model.NumNeutralSentiments);

    Labels.push("Positive");
    Labels.push("Negative");
    Labels.push("Neutral");

    var DataSet = {
        label: "Sentiment Score",
        data: Data,
        backgroundColor: [
            'rgba(75, 192, 192, 0.2)',
            'rgba(255, 99, 132, 0.2)',
            'rgba(255, 206, 86, 0.2)'
        ],
        borderColor: [
            'rgba(75, 192, 192, 1)',
            'rgba(255, 99, 132, 1)',
            'rgba(255, 206, 86, 1)'
        ],
        borderWidth: 1,
        lineTension: 0,
    };

    var datasetvalues = {
        labels: Labels, // x-axis label values
        datasets: [DataSet] // y-axis
    };

    barChartOptions = {
        indexAxis: 'x',
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            title: {
                display: true,
                text: 'Sentiment Score'
            }
        },
        scales: {
            x: {
                barPercentage: 1,
                categoryPercentage: 0.6,
            },
            y: {
                barPercentage: 1,
                categoryPercentage: 0.6,
                ticks: {
                    beginAtZero: true
                }
            }
        }
    }

    pieChartOptions = barChartOptions;
    delete pieChartOptions.indexAxis;
    delete pieChartOptions.scales;
    var pieChart = new Chart(
        document.getElementById('pie-chart').getContext('2d'), {
        type: 'pie',
        data: datasetvalues,
        options: pieChartOptions
    });

    /*
    var verticalBarChart = new Chart(
        document.getElementById('bar-chart').getContext('2d'), {
        type: 'bar',
        data: datasetvalues,
        options: barChartOptions
    });
    horizonntalBarChartOptions = barChartOptions;
    horizonntalBarChartOptions['indexAxis'] = 'y';
    delete horizonntalBarChartOptions.scales;
    console.log(barChartOptions);
    var horizonntalBarChart = new Chart(
        document.getElementById('horizontal-bar-chart').getContext('2d'), {
        type: 'bar',
        data: datasetvalues,
        options: horizonntalBarChartOptions
    });
    var doughnutChart = new Chart(
        document.getElementById('doughnut-chart').getContext('2d'), {
        type: 'doughnut',
        data: datasetvalues,
        options: pieChartOptions
    });
    var polarAreaChart = new Chart(
        document.getElementById('polar-area-chart').getContext('2d'), {
        type: 'polarArea',
        data: datasetvalues,
        options: pieChartOptions
    });
    */
</script>